import { PrismaService } from '../prisma/prisma.service';
export declare class UsersService {
    private prisma;
    constructor(prisma: PrismaService);
    createUser(user: any): Promise<{
        id: number;
        gamesWon: number;
        gamesLost: number;
        username: string;
        display_name: string;
        image: string;
        friends: number[];
        connected: number;
        blocked: number[];
        currentRoom: number;
        twoFASecret: string;
        twoFAEnabled: boolean;
        twoFAlogin: boolean;
    }>;
    updateGameResults(winnerId: number, loserId: number): Promise<void>;
    getUserById(id: number): Promise<{
        id: number;
        gamesWon: number;
        gamesLost: number;
        username: string;
        display_name: string;
        image: string;
        friends: number[];
        connected: number;
        blocked: number[];
        currentRoom: number;
        twoFASecret: string;
        twoFAEnabled: boolean;
        twoFAlogin: boolean;
    }>;
    getOne(id: number): Promise<{
        image: string;
        games: {
            id: number;
            startTime: Date;
            user1Id: number;
            user2Id: number;
            user1Score: number;
            user2Score: number;
        }[];
        id: number;
        username: string;
        display_name: string;
        connected: number;
    }>;
    getUserByUsername(username: string): Promise<{
        id: number;
        gamesWon: number;
        gamesLost: number;
        username: string;
        display_name: string;
        image: string;
        friends: number[];
        connected: number;
        blocked: number[];
        currentRoom: number;
        twoFASecret: string;
        twoFAEnabled: boolean;
        twoFAlogin: boolean;
    }>;
    getAllUsers(): Promise<{
        image: string;
        id: number;
        username: string;
        display_name: string;
        connected: number;
    }[]>;
    updateUserDiplayName(id: number, displayName: string): Promise<{
        id: number;
        gamesWon: number;
        gamesLost: number;
        username: string;
        display_name: string;
        image: string;
        friends: number[];
        connected: number;
        blocked: number[];
        currentRoom: number;
        twoFASecret: string;
        twoFAEnabled: boolean;
        twoFAlogin: boolean;
    }>;
    checkDisplayNameAvailability(display_name: string): Promise<boolean>;
    updateUserImage(id: string, imageUrl: string): Promise<{
        id: number;
        gamesWon: number;
        gamesLost: number;
        username: string;
        display_name: string;
        image: string;
        friends: number[];
        connected: number;
        blocked: number[];
        currentRoom: number;
        twoFASecret: string;
        twoFAEnabled: boolean;
        twoFAlogin: boolean;
    }>;
    getFriends(userId: number): Promise<number[]>;
    addFriend(userId: number, friendId: number): Promise<void>;
    removeFriend(userId: number, friendId: number): Promise<void>;
    getUserGames(userId: string): Promise<any>;
    getUserImage(userId: string): Promise<any>;
    setConnected(userId: number): Promise<any>;
    setDisconnected(userId: number): Promise<any>;
    setInGame(userId: number): Promise<any>;
    setOutGame(userId: number): Promise<any>;
    getCurrentRoom(userId: number): Promise<any>;
    setCurrentRoom(userId: number, roomId: number): Promise<void>;
    RemoveCurrentRoom(userId: number): Promise<any>;
    blockUser(userId: number, blockId: number): Promise<any>;
    getBlockedUsers(userId: number): Promise<any>;
    turnOnTwoFactorAuthentication(userId: number): Promise<void>;
}
